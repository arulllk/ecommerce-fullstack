const Product=require("../models/product"),{productSchema:productSchema}=require("../validators/productValidator"),{BadRequestError:BadRequestError}=require("../errors"),{uploadOnCloudinary:uploadOnCloudinary}=require("../utils/cloudinary"),createProduct=async(req,res)=>{const{error:error}=productSchema.validate(req.body,{abortEarly:!1});if(error){const formattedErrors=error.details.reduce((acc,curr)=>{const field=curr.path[0];return acc[field]=curr.message,acc},{});return res.status(400).json({status:"Error",message:"Validation Failed",errors:formattedErrors})}if(!req.file)throw new BadRequestError("Image is missing",{image:"Image is required"});const imagePath=req.file.path;let cloudinaryResult;try{cloudinaryResult=await uploadOnCloudinary(imagePath,"Products");const{title:title,category:category,mrp:mrp,sellingPrice:sellingPrice,summary:summary,rating:rating,reviewsCount:reviewsCount,altText:altText,slug:slug}=req.body,product=new Product({title:title,category:category,mrp:mrp,sellingPrice:sellingPrice,summary:summary,rating:rating,reviewsCount:reviewsCount,altText:altText,slug:slug,image:cloudinaryResult.secure_url});await product.save(),res.status(201).json({status:"Success",message:"Product created successfully",data:{product:product,image:cloudinaryResult}})}catch(error){next(error)}};module.exports={createProduct:createProduct};